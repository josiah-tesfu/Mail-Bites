{
  "version": 3,
  "sources": ["../src/content/logger.ts", "../src/content/navigation.ts", "../src/content/viewTracker.ts", "../src/content/ui/minimalInboxRenderer.ts", "../src/content/app.ts", "../src/content/index.ts"],
  "sourcesContent": ["/**\n * Shared logging utilities for the Mail Bites content script.\n *\n * The Chrome extension lives entirely inside Gmail's DOM, so writing to the\n * console with a consistent prefix makes it easier to filter messages while\n * debugging or instructing future contributors.\n */\n\nconst LOG_PREFIX = '[Mail Bites]';\n\nexport interface Logger {\n  info: (...payload: unknown[]) => void;\n  warn: (...payload: unknown[]) => void;\n  error: (...payload: unknown[]) => void;\n}\n\n/**\n * Lightweight wrapper around the browser console that namespaces output.\n */\nexport const logger: Logger = {\n  info: (...payload) => console.info(LOG_PREFIX, ...payload),\n  warn: (...payload) => console.warn(LOG_PREFIX, ...payload),\n  error: (...payload) => console.error(LOG_PREFIX, ...payload)\n};\n", "/**\n * Navigation utilities tailored for Gmail's single-page-app routing.\n *\n * Gmail mutates the current document via `history.pushState` and\n * `history.replaceState` without full page reloads. We patch these methods so\n * that Mail Bites can be notified whenever the user navigates between inbox,\n * search results, or individual conversations.\n */\n\ntype NavigationListener = (url: string) => void;\n\nconst listeners = new Set<NavigationListener>();\n\nlet patched = false;\nlet originalPushState: History['pushState'] | null = null;\nlet originalReplaceState: History['replaceState'] | null = null;\nlet boundNotify: (() => void) | null = null;\n\n/**\n * Notifies all registered listeners that a navigation event occurred.\n * The callback is queued in a microtask so that document mutations have a\n * chance to run before listeners inspect the DOM.\n */\nfunction notifyListeners() {\n  const href = window.location.href;\n  queueMicrotask(() => {\n    for (const listener of Array.from(listeners)) {\n      listener(href);\n    }\n  });\n}\n\nfunction ensurePatched() {\n  if (patched) {\n    return;\n  }\n\n  patched = true;\n  originalPushState = history.pushState.bind(history);\n  originalReplaceState = history.replaceState.bind(history);\n  boundNotify = notifyListeners;\n\n  const wrapHistoryMethod = <T extends keyof History>(method: T) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function patchedHistoryMethod(this: History, ...args: any[]) {\n      const original =\n        method === 'pushState' ? originalPushState : originalReplaceState;\n      if (original) {\n        original(...args);\n      }\n      boundNotify?.();\n    };\n  };\n\n  history.pushState = wrapHistoryMethod('pushState');\n  history.replaceState = wrapHistoryMethod('replaceState');\n  window.addEventListener('popstate', boundNotify);\n}\n\nfunction teardownPatchesIfNeeded() {\n  if (!patched || listeners.size > 0) {\n    return;\n  }\n\n  if (originalPushState) {\n    history.pushState = originalPushState;\n  }\n\n  if (originalReplaceState) {\n    history.replaceState = originalReplaceState;\n  }\n\n  if (boundNotify) {\n    window.removeEventListener('popstate', boundNotify);\n  }\n\n  patched = false;\n  originalPushState = null;\n  originalReplaceState = null;\n  boundNotify = null;\n}\n\n/**\n * Registers a navigation listener. The callback is invoked whenever Gmail\n * changes its SPA view through the History API.\n *\n * The returned function can be invoked to unregister the listener.\n */\nexport function registerNavigationListener(\n  listener: NavigationListener\n): () => void {\n  if (listeners.size === 0) {\n    ensurePatched();\n  }\n\n  listeners.add(listener);\n  return () => {\n    listeners.delete(listener);\n    teardownPatchesIfNeeded();\n  };\n}\n", "import { logger } from './logger';\nimport { registerNavigationListener } from './navigation';\n\n/**\n * Context information that describes the current Gmail view.\n */\nexport interface ViewContext {\n  /**\n   * Absolute URL (including hash) corresponding to the SPA route.\n   */\n  url: string;\n  /**\n   * Hash fragment used by Gmail to encode mailbox, search, or conversation IDs.\n   */\n  hash: string;\n  /**\n   * The document pathname for reference (typically `/mail/u/0/`).\n   */\n  path: string;\n  /**\n   * Timestamp when the context snapshot was produced.\n   */\n  timestamp: number;\n  /**\n   * Gmail's primary content container (usually `div[role=\"main\"]`).\n   */\n  mainElement: HTMLElement | null;\n}\n\nexport type ViewChangeHandler = (context: ViewContext) => void;\n\nexport interface GmailViewTrackerOptions {\n  /**\n   * Minimum delay between DOM mutation events and the next evaluation cycle.\n   * Keeping this value low ensures the content script reacts quickly without\n   * thrashing while Gmail renders.\n   */\n  debounceMs?: number;\n}\n\n/**\n * Observes Gmail's SPA navigation and DOM mutations to decide when Mail Bites\n * should refresh its UI. The class patches the History API (via\n * `registerNavigationListener`) and couples it with a MutationObserver to cover\n * both URL-driven and in-place DOM refreshes.\n */\nexport class GmailViewTracker {\n  private readonly debounceMs: number;\n  private mutationObserver: MutationObserver | null = null;\n  private unsubscribeNavigation: (() => void) | null = null;\n  private evaluationTimer: number | null = null;\n  private lastUrl: string | null = null;\n  private lastMainElement: HTMLElement | null = null;\n  private started = false;\n\n  constructor(\n    private readonly onViewChange: ViewChangeHandler,\n    options?: GmailViewTrackerOptions\n  ) {\n    this.debounceMs = options?.debounceMs ?? 50;\n  }\n\n  /**\n   * Starts monitoring Gmail for view changes. Calling this method multiple\n   * times has no effect.\n   */\n  start(): void {\n    if (this.started) {\n      return;\n    }\n    this.started = true;\n\n    this.unsubscribeNavigation = registerNavigationListener(() =>\n      this.scheduleEvaluate('history')\n    );\n\n    this.mutationObserver = new MutationObserver(() =>\n      this.scheduleEvaluate('mutation')\n    );\n\n    this.observeDocumentBody();\n    this.scheduleEvaluate('initial');\n\n    window.addEventListener('beforeunload', this.handleBeforeUnload);\n  }\n\n  /**\n   * Stops monitoring Gmail and restores patched browser APIs.\n   */\n  stop(): void {\n    if (!this.started) {\n      return;\n    }\n\n    this.started = false;\n\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n      this.mutationObserver = null;\n    }\n\n    if (this.unsubscribeNavigation) {\n      this.unsubscribeNavigation();\n      this.unsubscribeNavigation = null;\n    }\n\n    if (this.evaluationTimer !== null) {\n      window.clearTimeout(this.evaluationTimer);\n      this.evaluationTimer = null;\n    }\n\n    this.lastUrl = null;\n    this.lastMainElement = null;\n\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  }\n\n  private handleBeforeUnload = () => {\n    this.stop();\n  };\n\n  /**\n   * Ensures Gmail's `<body>` element is under observation. Gmail renders pages\n   * incrementally, so the MutationObserver is (re)attached whenever a body\n   * becomes available.\n   */\n  private observeDocumentBody(): void {\n    const { mutationObserver } = this;\n    if (!mutationObserver) {\n      return;\n    }\n\n    const observe = () => {\n      const body = document.body;\n      if (!body) {\n        window.setTimeout(observe, this.debounceMs);\n        return;\n      }\n\n      mutationObserver.observe(body, {\n        childList: true,\n        subtree: true\n      });\n    };\n\n    observe();\n  }\n\n  /**\n   * Schedules a view evaluation run. Rapid successive events are debounced.\n   */\n  private scheduleEvaluate(reason: 'history' | 'mutation' | 'initial'): void {\n    if (this.evaluationTimer !== null) {\n      return;\n    }\n\n    this.evaluationTimer = window.setTimeout(() => {\n      this.evaluationTimer = null;\n      this.evaluate(reason);\n    }, this.debounceMs);\n  }\n\n  /**\n   * Computes the current view context and invokes the consumer callback when\n   * meaningful changes are detected.\n   */\n  private evaluate(reason: 'history' | 'mutation' | 'initial'): void {\n    const currentUrl = window.location.href;\n    const mainElement = document.querySelector<HTMLElement>('div[role=\"main\"]');\n    const urlChanged = this.lastUrl !== currentUrl;\n    const mainChanged = this.lastMainElement !== mainElement;\n    const shouldEmit =\n      reason === 'initial' || urlChanged || mainChanged || !mainElement;\n\n    if (!shouldEmit) {\n      logger.info('Skipped view refresh; no changes detected.');\n      return;\n    }\n\n    this.lastUrl = currentUrl;\n    this.lastMainElement = mainElement ?? null;\n\n    const context: ViewContext = {\n      url: currentUrl,\n      hash: window.location.hash,\n      path: window.location.pathname,\n      timestamp: Date.now(),\n      mainElement: mainElement ?? null\n    };\n\n    logger.info('Detected Gmail view update.', {\n      reason,\n      urlChanged,\n      mainChanged,\n      context\n    });\n\n    this.onViewChange(context);\n  }\n}\n", "import type { ViewContext } from '../viewTracker';\nimport { logger } from '../logger';\n\n/**\n * Extracts and renders the list of visible email subject lines within the Gmail\n * primary inbox. This renderer is intentionally simple\u2014its goal is to validate\n * the architectural scaffolding rather than ship production UI.\n */\nexport class MinimalInboxRenderer {\n  private container: HTMLElement | null = null;\n\n  /**\n   * Renders the overlay into the provided root. Repeated calls will re-render\n   * the subject list based on the latest Gmail DOM state.\n   */\n  render(context: ViewContext, overlayRoot: HTMLElement): void {\n    if (!context.mainElement) {\n      logger.warn('MinimalInboxRenderer: Missing mainElement; skipping render.');\n      return;\n    }\n\n    const subjects = this.collectSubjects(context.mainElement);\n    logger.info('MinimalInboxRenderer: Rendering subjects.', {\n      count: subjects.length,\n      url: context.url\n    });\n\n    this.ensureContainer(overlayRoot);\n    this.updateMarkup(subjects);\n  }\n\n  /**\n   * Clears the overlay contents.\n   */\n  reset(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n\n  private ensureContainer(overlayRoot: HTMLElement): void {\n    if (this.container && overlayRoot.contains(this.container)) {\n      return;\n    }\n\n    const container = document.createElement('div');\n    container.className = 'mail-bites-inbox-list';\n    overlayRoot.appendChild(container);\n    this.container = container;\n  }\n\n  private updateMarkup(subjects: string[]): void {\n    if (!this.container) {\n      return;\n    }\n\n    if (subjects.length === 0) {\n      this.container.innerHTML =\n        '<p class=\"mail-bites-empty\">No conversations detected in the Primary inbox.</p>';\n      return;\n    }\n\n    const list = document.createElement('ul');\n    list.className = 'mail-bites-subjects';\n\n    for (const subject of subjects) {\n      const item = document.createElement('li');\n      item.textContent = subject;\n      list.appendChild(item);\n    }\n\n    this.container.innerHTML = '';\n    this.container.appendChild(list);\n  }\n\n  /**\n   * Navigates Gmail's inbox table structure to collect subject lines.\n   */\n  private collectSubjects(mainElement: HTMLElement): string[] {\n    const rows = Array.from(\n      mainElement.querySelectorAll<HTMLTableRowElement>('tr.zA')\n    );\n\n    const subjects = rows\n      .map((row) => {\n        // `span.bog` commonly contains the subject text.\n        const subjectSpan = row.querySelector<HTMLSpanElement>('span.bog');\n        if (subjectSpan && subjectSpan.textContent) {\n          return subjectSpan.textContent.trim();\n        }\n\n        // Fallback: attempt to read aria-label or title attributes.\n        const fallback =\n          row.getAttribute('aria-label') ?? row.getAttribute('title') ?? '';\n        return fallback.trim();\n      })\n      .filter((subject) => subject.length > 0);\n\n    return subjects;\n  }\n}\n", "import { logger } from './logger';\nimport { GmailViewTracker, ViewContext } from './viewTracker';\nimport { MinimalInboxRenderer } from './ui/minimalInboxRenderer';\n\nexport interface MailBitesAppOptions {\n  /**\n   * Element id used for the overlay wrapper that Mail Bites injects into Gmail.\n   */\n  rootId?: string;\n}\n\n/**\n * Coordinates the lifecycle of the Mail Bites content script. The class owns\n * the Gmail view tracker and exposes hooks where future features (minimalist UI\n * overhaul, AI summaries, etc.) will attach.\n */\nexport class MailBitesApp {\n  private readonly rootId: string;\n  private readonly tracker: GmailViewTracker;\n  private rootElement: HTMLDivElement | null = null;\n  private activeMainElement: HTMLElement | null = null;\n  private lastContext: ViewContext | null = null;\n  private readonly inboxRenderer = new MinimalInboxRenderer();\n\n  constructor(options?: MailBitesAppOptions) {\n    this.rootId = options?.rootId ?? 'mail-bites-root';\n    this.tracker = new GmailViewTracker((context) => this.handleViewChange(context));\n  }\n\n  /**\n   * Begins observing Gmail and prepares the extension overlay.\n   */\n  start(): void {\n    logger.info('Starting Mail Bites content script.');\n    this.tracker.start();\n  }\n\n  /**\n   * Shuts down observers and removes Mail Bites DOM artifacts.\n   */\n  stop(): void {\n    logger.info('Stopping Mail Bites content script.');\n    this.tracker.stop();\n    this.detachOverlay();\n  }\n\n  /**\n   * Ensures the overlay root exists and returns it so new UI can be mounted.\n   */\n  private ensureOverlayRoot(): HTMLDivElement {\n    if (this.rootElement && document.body?.contains(this.rootElement)) {\n      return this.rootElement;\n    }\n\n    const root = document.createElement('div');\n    root.id = this.rootId;\n    root.dataset.mailBites = 'overlay';\n    root.classList.add('mail-bites-overlay');\n    document.body?.appendChild(root);\n    this.rootElement = root;\n    return root;\n  }\n\n  /**\n   * Handles each Gmail view update. Future feature modules should plug into\n   * this method (or the derived helpers) to redraw overlays.\n   */\n  private handleViewChange(context: ViewContext): void {\n    this.lastContext = context;\n\n    if (!context.mainElement) {\n      logger.warn('Gmail main container is unavailable; deferring initialization.', context.url);\n      return;\n    }\n\n    if (this.activeMainElement && this.activeMainElement !== context.mainElement) {\n      this.teardownCurrentView();\n    }\n\n    this.activeMainElement = context.mainElement;\n    const overlayRoot = this.ensureOverlayRoot();\n\n    logger.info('Mail Bites ready for rendering.', {\n      url: context.url,\n      descriptor: context.hash || context.path\n    });\n\n    overlayRoot.innerHTML = '';\n    this.inboxRenderer.render(context, overlayRoot);\n  }\n\n  /**\n   * Removes Mail Bites specific DOM state while leaving Gmail untouched.\n   */\n  private teardownCurrentView(): void {\n    if (!this.activeMainElement) {\n      return;\n    }\n\n    logger.info('Tearing down view bindings for previous Gmail context.');\n    this.activeMainElement = null;\n    this.inboxRenderer.reset();\n  }\n\n  /**\n   * Removes overlay root to leave Gmail pristine (used on stop / extension reload).\n   */\n  private detachOverlay(): void {\n    if (this.rootElement && this.rootElement.parentElement) {\n      this.rootElement.parentElement.removeChild(this.rootElement);\n    }\n    this.rootElement = null;\n    this.inboxRenderer.reset();\n  }\n\n  /**\n   * Exposes the last known Gmail context for debugging or testing hooks.\n   */\n  getCurrentContext(): ViewContext | null {\n    return this.lastContext;\n  }\n}\n", "/**\n * Mail Bites content script entry point.\n *\n * The file wires together the high-level `MailBitesApp` and defers execution\n * until Gmail's DOM is ready. The exported global (`window.mailBites`) is a\n * convenience for manual debugging via DevTools.\n */\n\nimport { MailBitesApp } from './app';\n\ndeclare global {\n  interface Window {\n    mailBites?: {\n      app: MailBitesApp;\n    };\n  }\n}\n\nconst app = new MailBitesApp();\n\nfunction bootstrap() {\n  app.start();\n  window.mailBites = { app };\n}\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', bootstrap, { once: true });\n} else {\n  bootstrap();\n}\n"],
  "mappings": "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",
  "names": []
}
